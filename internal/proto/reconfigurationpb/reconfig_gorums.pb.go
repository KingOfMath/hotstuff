// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.7.0-devel
// 	protoc            v3.17.3
// source: internal/proto/reconfigurationpb/reconfig.proto

package reconfigurationpb

import (
	context "context"
	fmt "fmt"
	gorums "github.com/relab/gorums"
	hotstuffpb "github.com/relab/hotstuff/internal/proto/hotstuffpb"
	orchestrationpb "github.com/relab/hotstuff/internal/proto/orchestrationpb"
	encoding "google.golang.org/grpc/encoding"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(7 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 7)
)

// A Configuration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type Configuration struct {
	gorums.RawConfiguration
	nodes []*Node
	qspec QuorumSpec
}

// ConfigurationFromRaw returns a new Configuration from the given raw configuration and QuorumSpec.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//  cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//  cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func ConfigurationFromRaw(rawCfg gorums.RawConfiguration, qspec QuorumSpec) *Configuration {
	// return an error if the QuorumSpec interface is not empty and no implementation was provided.
	var test interface{} = struct{}{}
	if _, empty := test.(QuorumSpec); !empty && qspec == nil {
		panic("QuorumSpec may not be nil")
	}
	return &Configuration{
		RawConfiguration: rawCfg,
		qspec:            qspec,
	}
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *Configuration) Nodes() []*Node {
	if c.nodes == nil {
		c.nodes = make([]*Node, 0, c.Size())
		for _, n := range c.RawConfiguration {
			c.nodes = append(c.nodes, &Node{n})
		}
	}
	return c.nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c Configuration) And(d *Configuration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c Configuration) Except(rm *Configuration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// Manager maintains a connection pool of nodes on
// which quorum calls can be performed.
type Manager struct {
	*gorums.RawManager
}

// NewManager returns a new Manager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewManager(opts ...gorums.ManagerOption) (mgr *Manager) {
	mgr = &Manager{}
	mgr.RawManager = gorums.NewRawManager(opts...)
	return mgr
}

// NewConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed. The QuorumSpec interface is also a ConfigOption.
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (m *Manager) NewConfiguration(opts ...gorums.ConfigOption) (c *Configuration, err error) {
	if len(opts) < 1 || len(opts) > 2 {
		return nil, fmt.Errorf("wrong number of options: %d", len(opts))
	}
	c = &Configuration{}
	for _, opt := range opts {
		switch v := opt.(type) {
		case gorums.NodeListOption:
			c.RawConfiguration, err = gorums.NewRawConfiguration(m.RawManager, v)
			if err != nil {
				return nil, err
			}
		case QuorumSpec:
			// Must be last since v may match QuorumSpec if it is interface{}
			c.qspec = v
		default:
			return nil, fmt.Errorf("unknown option type: %v", v)
		}
	}
	// return an error if the QuorumSpec interface is not empty and no implementation was provided.
	var test interface{} = struct{}{}
	if _, empty := test.(QuorumSpec); !empty && c.qspec == nil {
		return nil, fmt.Errorf("missing required QuorumSpec")
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *Manager) Nodes() []*Node {
	gorumsNodes := m.RawManager.Nodes()
	nodes := make([]*Node, 0, len(gorumsNodes))
	for _, n := range gorumsNodes {
		nodes = append(nodes, &Node{n})
	}
	return nodes
}

// Node encapsulates the state of a node on which a remote procedure call
// can be performed.
type Node struct {
	*gorums.RawNode
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// ReconfigureStart RPC is called by the orchestrator on replicas to start participating in the proposal.
// ReconfigureReport contains the highest QC and View from the previous configuration
func (c *Configuration) ReconfigureStart(ctx context.Context, in *hotstuffpb.SyncInfo, opts ...gorums.CallOption) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "reconfigurationpb.Reconfiguration.ReconfigureStart",
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// QuorumSpec is the interface of quorum functions for Reconfiguration.
type QuorumSpec interface {
	gorums.ConfigOption

	// ReconfigureQF is the quorum function for the Reconfigure
	// quorum call method. The in parameter is the request object
	// supplied to the Reconfigure method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *orchestrationpb.ReconfigurationRequest'.
	ReconfigureQF(in *orchestrationpb.ReconfigurationRequest, replies map[uint32]*hotstuffpb.SyncInfo) (*hotstuffpb.SyncInfo, bool)
}

// Reconfigure RPC is the rpc called by the Orcchestrator to the replicas.
func (c *Configuration) Reconfigure(ctx context.Context, in *orchestrationpb.ReconfigurationRequest) (resp *hotstuffpb.SyncInfo, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "reconfigurationpb.Reconfiguration.Reconfigure",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*hotstuffpb.SyncInfo, len(replies))
		for k, v := range replies {
			r[k] = v.(*hotstuffpb.SyncInfo)
		}
		return c.qspec.ReconfigureQF(req.(*orchestrationpb.ReconfigurationRequest), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*hotstuffpb.SyncInfo), err
}

// Reconfiguration is the server-side API for the Reconfiguration Service
type Reconfiguration interface {
	Reconfigure(ctx gorums.ServerCtx, request *orchestrationpb.ReconfigurationRequest) (response *hotstuffpb.SyncInfo, err error)
	ReconfigureStart(ctx gorums.ServerCtx, request *hotstuffpb.SyncInfo)
}

func RegisterReconfigurationServer(srv *gorums.Server, impl Reconfiguration) {
	srv.RegisterHandler("reconfigurationpb.Reconfiguration.Reconfigure", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*orchestrationpb.ReconfigurationRequest)
		defer ctx.Release()
		resp, err := impl.Reconfigure(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("reconfigurationpb.Reconfiguration.ReconfigureStart", func(ctx gorums.ServerCtx, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*hotstuffpb.SyncInfo)
		defer ctx.Release()
		impl.ReconfigureStart(ctx, req)
	})
}

type internalSyncInfo struct {
	nid   uint32
	reply *hotstuffpb.SyncInfo
	err   error
}
